{"version":3,"sources":["head.glb","Head.js","SkyBox_Left.png","sky.png","SkyBox_Right.png","SkyBox_Up.png","SkyBox_Down.png","SkyBox_Back.png","SkyBox_Front.png","App.js","reportWebVitals.js","index.js"],"names":["Model","props","group","useRef","useGLTF","head","nodes","materials","useFrame","current","rotation","y","ref","dispose","material","geometry","skull","position","Math","PI","scale","MeshDistortMaterial","envMap","reflectivity","metalness","refractionRatio","color","attach","distort","speed","roughness","preload","softShadows","extend","OrbitControls","CameraControls","useThree","camera","domElement","gl","controls","state","update","enableZoom","args","App","Array","tex","useCubeTexture","left","right","up","down","front","back","path","shadowMap","castShadow","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","ContactShadows","opacity","width","height","blur","far","resolution","fallback","Environment","files","background","visible","receiveShadow","transparent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAAe,MAA0B,iC,OCa1B,SAASA,EAAMC,GAC5B,IAAMC,EAAQC,mBADqB,EAENC,YAAQC,GAA7BC,EAF2B,EAE3BA,MAAOC,EAFoB,EAEpBA,UAMf,OAHAC,aAAS,WACPN,EAAMO,QAAQC,SAASC,GAAK,QAG5B,+CAAOC,IAAKV,GAAWD,GAAvB,IAA8BY,QAAS,KAAvC,SACE,sBACEC,SAAUP,EAAU,gBACpBQ,SAAUT,EAAMU,MAAMD,SACtBE,SAAU,CAAC,GAAI,IAAK,MACpBP,SAAU,CAACQ,KAAKC,GAAK,EAAG,EAAG,GAC3BC,MAAO,CAAC,KAAM,KAAM,MALtB,SAOE,cAACC,EAAA,EAAD,CACEC,OAAQ,KACRC,aAAc,EACdC,UAAW,EAEXC,gBAAiB,IACjBC,MAAO,YACPC,OAAO,WACPC,QAAS,EACTC,MAAO,EACPC,UAAW,SAOrB1B,IAAQ2B,QAAQ1B,G,YC/CD,GCAA,IDAA,IAA0B,yCEA1B,MAA0B,yCCA1B,MAA0B,sCCA1B,MAA0B,wCCA1B,MAA0B,wCCA1B,MAA0B,yCCkBzC2B,cACAC,YAAO,CAAEC,oBAET,IAAMC,EAAiB,WAAM,MAQvBC,cAFFC,EANyB,EAMzBA,OACMC,EAPmB,EAOzBC,GAAMD,WAIFE,EAAWrC,mBAEjB,OADAK,aAAS,SAACiC,GAAD,OAAWD,EAAS/B,QAAQiC,YAEnC,+BACE9B,IAAK4B,EACLG,YAAY,EACZC,KAAM,CAACP,EAAQC,MAqDN,SAASO,IACZ,IAAIC,MAAM,IAApB,IACMC,EAAMC,YAAe,CAACC,EAAKC,EAAMC,EAAGC,EAAKC,EAAMC,GAAM,CAAEC,KAAM,OACnE,OACE,eAAC,IAAD,CAASC,WAAS,EAAlB,UACI,cAAC,EAAD,IACF,qBAAK7B,OAAO,MAAMiB,KAAM,CAAC,QAAS,EAAG,MACrC,kCACAa,YAAU,EACVxC,SAAU,CAAC,IAAK,EAAG,GACnByC,UAAW,IACXC,uBAAsB,KACtBC,wBAAuB,KACvBC,oBAAmB,GACnBC,sBAAqB,GACrBC,sBAAqB,GACrBC,oBAAmB,GACnBC,wBAAuB,KAEzB,cAACC,EAAA,EAAD,CACFC,QAAS,EACTC,MAAO,EACPC,OAAQ,EACRC,KAAM,EACNC,IAAK,GACLC,WAAY,MAGR,eAAC,WAAD,CAAUC,SAAU,KAApB,UACE,cAACC,EAAA,EAAD,CAAaC,MAAO,CAAC1B,EAAKC,EAAMC,EAAGC,EAAKC,EAAMC,GAAOC,KAAM,KAAOqB,YAAY,IAG5E,cAAC,EAAD,CAAOxD,MAAO,CAAC,GAAI,GAAI,IAAME,OAAQyB,EAAK9B,SAAU,CAAC,EAAE,EAAE,QAI7D,uBAAM4D,SAAS,EAAOnE,SAAU,EAAEQ,KAAKC,GAAK,EAAG,EAAG,GAAIF,SAAU,CAAC,GAAI,GAAK,GAAI6D,eAAa,EAA3F,UACE,qCAAqBnD,OAAO,WAAWiB,KAAM,CAAC,IAAK,OACnD,gCAAgBjB,OAAO,WAAWoD,aAAW,EAACZ,QAAS,UCjI/D,IAYea,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,WAAD,CAAUlB,SAAU,KAApB,SACA,cAAC5B,EAAD,QAGF+C,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c3da2a29.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/head.7898a9cd.glb\";","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef } from 'react'\nimport { useGLTF , MeshDistortMaterial} from '@react-three/drei'\nimport { Canvas,\n  useLoader,\n  useFrame,\n  extend,\n  useThree } from 'react-three-fiber'\nimport head from './head.glb'\n\nexport default function Model(props) {\n  const group = useRef()\n  const { nodes, materials } = useGLTF(head)\n\n\n  useFrame(() => {\n    group.current.rotation.y += 0.002\n  })\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <mesh\n        material={materials['Material.001']}\n        geometry={nodes.skull.geometry}\n        position={[0, -4.6, 5.63]}\n        rotation={[Math.PI / 2, 0, 0]}\n        scale={[3.71, 3.71, 3.71]}\n      >\n        <MeshDistortMaterial\n          envMap={null}\n          reflectivity={1}\n          metalness={1}\n\n          refractionRatio={0.98}\n          color={\"lightgrey\"}\n          attach=\"material\"\n          distort={0} // Strength, 0 disables the effect (default=1)\n          speed={1} // Speed (default=1)\n          roughness={0}\n        />\n      </mesh>\n    </group>\n  )\n}\n\nuseGLTF.preload(head)\n","export default __webpack_public_path__ + \"static/media/SkyBox_Left.6fb41a16.png\";","export default __webpack_public_path__ + \"static/media/sky.11488782.png\";","export default __webpack_public_path__ + \"static/media/SkyBox_Right.2f9e285b.png\";","export default __webpack_public_path__ + \"static/media/SkyBox_Up.9b5657c7.png\";","export default __webpack_public_path__ + \"static/media/SkyBox_Down.25a5be83.png\";","export default __webpack_public_path__ + \"static/media/SkyBox_Back.fbe1d679.png\";","export default __webpack_public_path__ + \"static/media/SkyBox_Front.3ffcdd03.png\";","import React, { useRef, useState , Suspense} from 'react'\nimport { Canvas,\n  useLoader,\n  useFrame,\n  extend,\n  useThree } from 'react-three-fiber'\nimport { Environment, softShadows, MeshDistortMaterial, ContactShadows , useCubeTexture  } from '@react-three/drei'\nimport Skull from './Head'\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport grid from './sky.png'\nimport left from './SkyBox_Left.png'\nimport right from './SkyBox_Right.png'\nimport up from './SkyBox_Up.png'\nimport down from './SkyBox_Down.png'\nimport back from './SkyBox_Back.png'\nimport front from './SkyBox_Front.png'\n\n\nsoftShadows();\nextend({ OrbitControls });\n\nconst CameraControls = () => {\n  // Get a reference to the Three.js Camera, and the canvas html element.\n  // We need these to setup the OrbitControls class.\n  // https://threejs.org/docs/#examples/en/controls/OrbitControls\n\n  const {\n    camera,\n    gl: { domElement },\n  } = useThree();\n\n  // Ref to the controls, so that we can update them on every frame using useFrame\n  const controls = useRef();\n  useFrame((state) => controls.current.update());\n  return (\n    <orbitControls\n      ref={controls}\n      enableZoom={true}\n      args={[camera, domElement]}\n    />\n  );\n};\n\n\nfunction Sphere() {\n  return (\n    <mesh visible userData={{ test: \"hello\" }} position={[0, 0, 0]} castShadow>\n      <sphereGeometry attach=\"geometry\" args={[1, 32, 32]} />\n     <MeshDistortMaterial\n     envMap={null}\n     reflectivity={0.9}\n     metalness={1}\n     \n     refractionRatio={0.98}\n     color={\"#CCFFFD\"}\n    attach=\"material\"\n    distort={0} // Strength, 0 disables the effect (default=1)\n    speed={1} // Speed (default=1)\n    roughness={0}\n  />\n     \n    </mesh>\n  );\n}\n\n\nfunction Box(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => {\n    mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n  })\n  return (\n    <mesh\n      {...props}\n      receiveShadow castShadow\n      ref={mesh}\n      scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\n      onClick={(e) => setActive(!active)}\n      onPointerOver={(e) => setHover(true)}\n      onPointerOut={(e) => setHover(false)}>\n      <boxBufferGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n\nexport default function App() {\n  const x = new Array(30);\n  const tex = useCubeTexture([left,right,up,down,front,back],{ path: './' });\n  return (\n    <Canvas  shadowMap>\n        <CameraControls />\n      <fog attach=\"fog\" args={[\"white\", 0, 40]} />\n      <directionalLight\n      castShadow\n      position={[2.5, 8, 5]}\n      intensity={1.5}\n      shadow-mapSize-width={1024}\n      shadow-mapSize-height={1024}\n      shadow-camera-far={50}\n      shadow-camera-left={-10}\n      shadow-camera-right={10}\n      shadow-camera-top={10}\n      shadow-camera-bottom={-10}\n    />\n    <ContactShadows\n  opacity={1}\n  width={1}\n  height={1}\n  blur={1} // Amount of blue (default=1)\n  far={10} // Focal distance (default=10)\n  resolution={256} // Rendertarget resolution (default=256)\n/>\n     \n      <Suspense fallback={null} >\n        <Environment files={[left,right,up,down,front,back]} path={'./'}  background={false} >\n          \n          </Environment>\n          <Skull scale={[0.1,0.1,0.1]} envMap={tex} position={[0,0,0]}/>\n      \n      </Suspense>\n     \n      <mesh visible={false} rotation={[-Math.PI / 2, 0, 0]} position={[0, -0.5, 0]} receiveShadow>\n        <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\n        <shadowMaterial attach=\"material\" transparent opacity={1} />\n      </mesh>\n    </Canvas>\n  )\n}\n// <shadowMaterial attach=\"material\" transparent opacity={1} />","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useRef, useState , Suspense} from 'react'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './styles.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Suspense fallback={null}>\n    <App />\n    </Suspense>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}